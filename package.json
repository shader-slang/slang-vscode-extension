{
    "name": "slang-language-extension",
    "displayName": "Slang",
    "description": "Extension for the Slang Shading Language",
    "publisher": "shader-slang",
    "version": "1.10.1",
    "icon": "./images/icon.png",
    "engines": {
        "vscode": "^1.67.0"
    },
    "keywords": [
        "shader",
        "shading",
        "hlsl",
        "slang",
        "highlight",
        "completion",
        "hinting",
        "formatting"
    ],
    "categories": [
        "Programming Languages",
        "Formatters"
    ],
    "activationEvents": [
        "onLanguage:slang"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/shader-slang/slang-vscode-extension"
    },
    "main": "./client/out/main",
    "contributes": {
        "languages": [
            {
                "id": "slang",
                "aliases": [
                    "Slang",
                    "slang",
                    "hlsl"
                ],
                "extensions": [
                    ".slang",
                    ".slangh",
                    ".hlsl",
                    ".usf",
                    ".ush",
                    ".vfx",
                    ".fxc"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "configurationDefaults": {
            "[slang]": {
                "editor.wordBasedSuggestions": "off",
                "editor.formatOnType": true,
                "editor.formatOnPaste": true,
                "editor.inlayHints.enabled": "offUnlessPressed"
            }
        },
        "grammars": [
            {
                "language": "slang",
                "scopeName": "source.slang",
                "path": "./syntaxes/slang.tmLanguage.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Slang/HLSL",
            "properties": {
                "slang.predefinedMacros": {
                    "scope": "window",
                    "type": "array",
                    "items": {"type": "string"},
                    "examples": [["MY_MACRO", "MY_VALUE_MACRO=1"]],
                    "default": [],
                    "markdownDescription": "Predefined macros to use in the language server. Each item contains one macro definition. You can also use `macro_name=value` syntax to specify the value of the macro."
                },
                "slang.searchInAllWorkspaceDirectories": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Controls whether or not the language server should look in all sub-directories in the current workspace for an include or imported file if it is not found in the explicitly specified search paths."
                },
                "slang.additionalSearchPaths": {
                    "scope": "window",
                    "type": "array",
                    "items": {"type": "string"},
                    "examples": [["include/", "c:\\external-lib\\include"]],
                    "default": [],
                    "description": "The language server will search for the included or imported file in these additional directories first. If not found, the server will look in all sub directories in the current workspace (if enabled by the setting)."
                },
                "slang.enableCommitCharactersInAutoCompletion": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "membersOnly",
                        "on"
                    ],
                    "default": "membersOnly",
                    "markdownDescription": "Controls whether or not to enable commit characters for selecting an auto completion item in addition to pressing enter. 'off' - disabled. 'memberOnly' - use commit characters in a member list only. 'on' - use commit characters for all types of completions."
                },
                "slang.format.enableFormatOnType": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Controls whether or not to format code automatically while typing. Requires clang-format to be discoverable from PATH."
                },
                "slang.format.clangFormatLocation": {
                    "scope": "machine-overridable",
                    "type": "string",
                    "default": "",
                    "markdownDescription": "The location of clang-format for auto formatting, including the executable name. If left unspecified, will attempt to find `clang-format` under `PATH`, or under the C++ extension installation path."
                },
                "slang.slangdLocation": {
                    "scope": "machine-overridable",
                    "type": "string",
                    "default": "",
                    "markdownDescription": "The location of Slang's language server executable `slangd`. Will use bundled language server when unspecified."
                },
                "slang.format.clangFormatStyle": {
                    "scope": "window",
                    "type": "string",
                    "default": "file",
                    "markdownDescription": "The `-style` argument to pass to clang-format, without quotes. Examples: `Microsoft`, `LLVM`, `file:fileName`. Default value is `file`"
                },
                "slang.format.clangFormatFallbackStyle": {
                    "scope": "window",
                    "type": "string",
                    "default": "{BasedOnStyle: Microsoft, BreakBeforeBraces: Allman, ColumnLimit: 0}",
                    "markdownDescription": "The `-fallback-style` argument to pass to clang-format, without quotes. Examples: `Microsoft`, `LLVM`, `file:fileName`. Default value is `{BasedOnStyle: Microsoft, BreakBeforeBraces: Allman, ColumnLimit: 0}`"
                },
                "slang.format.allowLineBreakChangesInOnTypeFormatting":
                {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Controls whether the extension is allowed to make line-break changes when reformatting the code on typing."
                },
                "slang.format.allowLineBreakChangesInRangeFormatting": {
                    "scope": "window",
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Controls whether the extension is allowed to make line-break changes when doing range formatting, such as formatting on paste or on command."
                },
                "slang.inlayHints.deducedTypes": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Enable inlay hints for duduced decl types, e.g. the deduced type in `var i = 2`"
                },
                "slang.inlayHints.parameterNames": {
                    "scope": "window",
                    "type": "boolean",
                    "default": true,
                    "description": "Enable inlay hints for parameter names at call sites."
                },
                "slangLanguageServer.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the language server."
                }
            }
        }
    },
    "devDependencies": {
        "@types/vscode": "^1.67.0",
        "@vscode/test-electron": "^2.1.2",
        "@types/mocha": "^9.1.0",
        "@types/node": "^16.11.7",
        "@typescript-eslint/eslint-plugin": "^5.19.0",
        "@typescript-eslint/parser": "^5.19.0",
        "esbuild": "^0.14.42",
        "eslint": "^8.13.0",
        "mocha": "^9.2.1",
        "typescript": "^4.7.2"
    },
    "dependencies": {
        "vscode-languageclient": "^8.0.1"
    },
    "scripts": {
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "esbuild-base": "esbuild ./client/src/extension.ts --bundle --outfile=client/out/main.js --external:vscode --format=cjs --platform=node",
        "esbuild": "npm run esbuild-base -- --sourcemap",
        "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
        "test-compile": "tsc -p ./"
    }
}
